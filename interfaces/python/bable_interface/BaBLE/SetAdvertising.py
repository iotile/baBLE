# automatically generated by the FlatBuffers compiler, do not modify

# namespace: BaBLE

import flatbuffers

class SetAdvertising(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSetAdvertising(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SetAdvertising()
        x.Init(buf, n + offset)
        return x

    # SetAdvertising
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SetAdvertising
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # SetAdvertising
    def Uuids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # SetAdvertising
    def UuidsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SetAdvertising
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SetAdvertising
    def CompanyId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # SetAdvertising
    def AdvManufacturerData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SetAdvertising
    def AdvManufacturerDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SetAdvertising
    def AdvManufacturerDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SetAdvertising
    def ScanManufacturerData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # SetAdvertising
    def ScanManufacturerDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # SetAdvertising
    def ScanManufacturerDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def SetAdvertisingStart(builder): builder.StartObject(6)
def SetAdvertisingAddState(builder, state): builder.PrependBoolSlot(0, state, 0)
def SetAdvertisingAddUuids(builder, uuids): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(uuids), 0)
def SetAdvertisingStartUuidsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SetAdvertisingAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def SetAdvertisingAddCompanyId(builder, companyId): builder.PrependUint16Slot(3, companyId, 0)
def SetAdvertisingAddAdvManufacturerData(builder, advManufacturerData): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(advManufacturerData), 0)
def SetAdvertisingStartAdvManufacturerDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def SetAdvertisingAddScanManufacturerData(builder, scanManufacturerData): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(scanManufacturerData), 0)
def SetAdvertisingStartScanManufacturerDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def SetAdvertisingEnd(builder): return builder.EndObject()
