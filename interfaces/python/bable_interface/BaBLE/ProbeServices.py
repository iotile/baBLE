# automatically generated by the FlatBuffers compiler, do not modify

# namespace: BaBLE

import flatbuffers

class ProbeServices(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsProbeServices(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProbeServices()
        x.Init(buf, n + offset)
        return x

    # ProbeServices
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProbeServices
    def ConnectionHandle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # ProbeServices
    def Services(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Service import Service
            obj = Service()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProbeServices
    def ServicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ProbeServicesStart(builder): builder.StartObject(2)
def ProbeServicesAddConnectionHandle(builder, connectionHandle): builder.PrependUint16Slot(0, connectionHandle, 0)
def ProbeServicesAddServices(builder, services): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(services), 0)
def ProbeServicesStartServicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ProbeServicesEnd(builder): return builder.EndObject()
